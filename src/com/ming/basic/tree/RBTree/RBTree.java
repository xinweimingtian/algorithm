package com.ming.basic.tree.RBTree;

/**
 * @Description RBTree
 * @Author Administrator
 * @Date 2020/6/6 11:44 2020
 *
 *  红黑树规则
 *      1. 每一个节点不是红色的就是黑色的
 *      2. 根节点总是黑色的
 *      3. 如果节点是红色的，则它的子节点必须是黑色的（反之则不一定必须为真）
 *      4. 从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点。
 *  节点说明
 *      A 是B 的父节点
 *      B 是X 的父节点
 *      1. 外侧子孙节点
 *         B 是 A 左节点并且 X 是 B 的左节点
 *         B 是 A 右节点并且 X 是 B 的右节点
 *      2. 内侧子孙节点
 *         B 是 A 左节点并且 X 是 B 的右节点
 *         B 是 A 右节点并且 X 是 B 的左节点
 *
 *  旋转说明:
 *      右旋：把顶端节点移到它的右子节点位置，并把顶端节点的左子节点移到顶端节点位置
 *      左旋：把顶端节点移到它的左子节点位置，并把顶端节点的左子节点移到顶端节点位置
 *
 *  颜色变化说明
 *      1. 新增的点父节点是黑色  直接添加
 *      2. 新增的点父节点是红色
 *          2.1  新增节点是外侧子孙节点
 *              2.1.1  祖父节点颜色改变成红色（祖父节点是黑色，要不然无法添加父节点）
 *              2.1.2  改变父节点颜色为黑色
 *              2.1.3  以祖父节点为顶，进行旋转（如果外子孙节点是左，进行右旋，否则进行左旋）
 *          2.2  新增节点是内存子孙节点
 *              2.2.1  祖父节点颜色改变成红色
 *              2.2.2  新增节点颜色为黑色
 *              2.2.3  以父节点为顶，进行旋转（如果内子孙节点是父节点右子节点，进行左旋，否则进行右旋）
 *                      此时，父节点成为新增节点的子节点   新增节点成为祖父节点的子节点
 *              2.2.4  以祖父节点为顶，进行旋转（如果新的外子孙节点是左，进行右旋，否则进行左旋）
 *     3. 在新增节点之前（进行颜色变化，如果父子节点都是红色）
 *          3.1 外侧子孙节点  按照2.1
 *          3.2 内侧子孙节点  按照2.2
 */
public class RBTree {
}
